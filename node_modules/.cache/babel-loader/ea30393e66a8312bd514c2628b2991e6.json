{"ast":null,"code":"var _jsxFileName = \"/Users/vipl19-20063/Desktop/react-interview/src/App.js\";\nimport React, { useEffect, useReducer, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { showMyLearningToolTip } from '../src/store/reduxTest/ReduxTestActions';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport reducer from '../src/store/reducer';\nimport axios from 'axios';\n\nconst App = props => {\n  const [category, setCategory] = useState(null);\n  const [state, dispatch] = useReducer(reducer, {\n    showMyLearningTooltip: false\n  }); // console.log(\"state: \", state);\n  // const dispatch = useDispatch();\n  // let showMyLearningToolTip = useSelector(state => state.myLearningToolTip.showMyLearningTooltip);\n\n  const getCategories = async url => {\n    try {\n      var _resp$data;\n\n      let resp = await axios.get(url);\n\n      if (resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.data) {\n        return resp.data.data;\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(async () => {\n    var _category$sub_categor;\n\n    let categories = await getCategories(\"https://60891feca6f4a30017427aa2.mockapi.io/api/v1/ftask/categories\");\n    let category = categories[0];\n    setCategory(category);\n    let subCategoryDummyIds = [];\n\n    if ((category === null || category === void 0 ? void 0 : (_category$sub_categor = category.sub_categories) === null || _category$sub_categor === void 0 ? void 0 : _category$sub_categor.length) > 0) {\n      category === null || category === void 0 ? void 0 : category.sub_categories.forEach(el => {});\n    }\n\n    console.log(\"categories\", category);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Kishore\");\n};\n\nconst mapStateToProps = state => ({\n  showMyLearningTooltip: state.showMyLearningTooltip\n});\n\nconst mapDispatchToProps = dispatch => ({\n  showMyLearningToolTip: value => dispatch(showMyLearningToolTip(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/vipl19-20063/Desktop/react-interview/src/App.js"],"names":["React","useEffect","useReducer","useState","connect","showMyLearningToolTip","useSelector","useDispatch","reducer","axios","App","props","category","setCategory","state","dispatch","showMyLearningTooltip","getCategories","url","resp","get","data","err","console","log","categories","subCategoryDummyIds","sub_categories","length","forEach","el","mapStateToProps","mapDispatchToProps","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,yCAAtC;AACA,OAAO,WAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAQC,OAAR,MAAsB,sBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAEnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACM,OAAD,EAAU;AAC5CQ,IAAAA,qBAAqB,EAAE;AADqB,GAAV,CAApC,CAHmB,CAMrB;AACE;AACA;;AAEA,QAAMC,aAAa,GAAG,MAAOC,GAAP,IAAc;AAClC,QAAG;AAAA;;AACD,UAAIC,IAAI,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUF,GAAV,CAAjB;;AACA,UAAGC,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEE,IAAT,+CAAG,WAAYA,IAAf,EAAoB;AAClB,eAAOF,IAAI,CAACE,IAAL,CAAUA,IAAjB;AACD;AACF,KALD,CAKC,OAAMC,GAAN,EAAU;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GATD;;AAWArB,EAAAA,SAAS,CAAC,YAAY;AAAA;;AACrB,QAAIwB,UAAU,GAAG,MAAMR,aAAa,CAAC,qEAAD,CAApC;AACA,QAAIL,QAAQ,GAAGa,UAAU,CAAC,CAAD,CAAzB;AACAZ,IAAAA,WAAW,CAACD,QAAD,CAAX;AACA,QAAIc,mBAAmB,GAAG,EAA1B;;AACA,QAAG,CAAAd,QAAQ,SAAR,IAAAA,QAAQ,WAAR,qCAAAA,QAAQ,CAAEe,cAAV,gFAA0BC,MAA1B,IAAmC,CAAtC,EAAwC;AACrChB,MAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEe,cAAV,CAAyBE,OAAzB,CAAiCC,EAAE,IAAG,CAErC,CAFD;AAGF;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BZ,QAA1B;AAGA,GAbQ,EAaN,EAbM,CAAT;AAcA,sBAEM;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFN;AAMD,CAzCD;;AA4CA,MAAMmB,eAAe,GAAGjB,KAAK,KAAK;AAChCE,EAAAA,qBAAqB,EAAGF,KAAK,CAACE;AADE,CAAL,CAA7B;;AAIA,MAAMgB,kBAAkB,GAAGjB,QAAQ,KAAK;AACtCV,EAAAA,qBAAqB,EAAE4B,KAAK,IAAIlB,QAAQ,CAACV,qBAAqB,CAAC4B,KAAD,CAAtB;AADF,CAAL,CAAnC;;AAIA,eAAe7B,OAAO,CAAC2B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CtB,GAA7C,CAAf","sourcesContent":["import React, { useEffect, useReducer, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { showMyLearningToolTip } from '../src/store/reduxTest/ReduxTestActions';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport  reducer  from '../src/store/reducer';\nimport axios from 'axios';\n  \nconst App = props => {\n\n  const [category, setCategory] = useState(null);\n  const [state, dispatch] = useReducer(reducer, {\n    showMyLearningTooltip: false \n})\n// console.log(\"state: \", state);\n  // const dispatch = useDispatch();\n  // let showMyLearningToolTip = useSelector(state => state.myLearningToolTip.showMyLearningTooltip);\n\n  const getCategories = async (url) =>{\n    try{\n      let resp = await axios.get(url);\n      if(resp?.data?.data){\n        return resp.data.data;\n      }\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  useEffect(async () => {\n   let categories = await getCategories(\"https://60891feca6f4a30017427aa2.mockapi.io/api/v1/ftask/categories\");\n   let category = categories[0];\n   setCategory(category);\n   let subCategoryDummyIds = [];\n   if(category?.sub_categories?.length > 0){\n      category?.sub_categories.forEach(el =>{\n\n      });\n   }\n   console.log(\"categories\", category);\n\n   \n  }, [])\n  return (\n\n        <div className=\"App\">\n          Kishore\n        </div>\n  );\n}\n\n\nconst mapStateToProps = state => ({\n  showMyLearningTooltip : state.showMyLearningTooltip\n});\n\nconst mapDispatchToProps = dispatch => ({\n  showMyLearningToolTip: value => dispatch(showMyLearningToolTip(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}